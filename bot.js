import { Telegraf } from "telegraf";
import { config } from "dotenv";
import { getNewCoins } from "./scraper.js";
import fs from "fs";
import express from "express";
import fetch from "node-fetch";

config();

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const CHAT_ID = process.env.CHAT_ID;

// ===== Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render / UptimeRobot =====
const app = express();
app.get("/", (req, res) => res.send("‚úÖ Bot is running!"));
app.get("/ping", (req, res) => res.status(200).send("OK"));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üåê Server running on port ${PORT}`));

// ===== Keep Render awake (—Ä–∞–∑ –Ω–∞ 5 —Ö–≤) =====
setInterval(() => {
  fetch("https://nbu-coin-bot.onrender.com/ping").catch(() => {});
}, 5 * 60 * 1000);

// ===== Known coins (–ª–æ–∫–∞–ª—å–Ω–∞ –±–∞–∑–∞) =====
const KNOWN_COINS_FILE = "./knownCoins.json";
let knownCoins = {};

if (fs.existsSync(KNOWN_COINS_FILE)) {
  try {
    knownCoins = JSON.parse(fs.readFileSync(KNOWN_COINS_FILE, "utf-8"));
  } catch {
    knownCoins = {};
  }
} else {
  fs.writeFileSync(KNOWN_COINS_FILE, JSON.stringify({}, null, 2));
}

function saveKnownCoins() {
  fs.writeFileSync(KNOWN_COINS_FILE, JSON.stringify(knownCoins, null, 2));
}

// ===== –ë–µ–∑–ø–µ—á–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram =====
async function sendTelegramMessage(message) {
  try {
    await bot.telegram.sendMessage(CHAT_ID, message, {
      parse_mode: "HTML",
      disable_web_page_preview: false,
    });
  } catch (err) {
    console.error("Telegram send error:", err.message);
    setTimeout(() => sendTelegramMessage(message), 5000);
  }
}

// ===== –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ =====
bot.start((ctx) => ctx.reply("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"));

bot.command("all_coins", async (ctx) => {
  try {
    await ctx.reply("‚è≥ –û—Ç—Ä–∏–º—É—é –≤—Å—ñ –º–æ–Ω–µ—Ç–∏ –∑ —Å–∞–π—Ç—É...");
    const coins = await getNewCoins();

    if (coins.length === 0) return ctx.reply("–ù–∞ —Å–∞–π—Ç—ñ –º–æ–Ω–µ—Ç –ø–æ–∫–∏ –Ω–µ–º–∞—î üòï");

    let message = coins.map(c => `‚Ä¢ <a href="${c.link}">${c.title}</a>`).join("\n");
    await ctx.reply(message, { parse_mode: "HTML" });

  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–æ–Ω–µ—Ç:", err);
    ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –º–æ–Ω–µ—Ç");
  }
});

// ===== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –º–æ–Ω–µ—Ç =====
async function checkNewCoins() {
  const now = new Date();
  const hour = now.getHours();
  const day = now.getDay(); // 0 - –Ω–µ–¥—ñ–ª—è, 1 - –ø–æ–Ω–µ–¥—ñ–ª–æ–∫, ..., 6 - —Å—É–±–æ—Ç–∞

  // –ü—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –ü–Ω‚Äì–°–± (1‚Äì6) —ñ –∑ 8:00 –¥–æ 23:00
  if (day === 0 || hour < 8 || hour >= 23) {
    console.log(`‚è∏ –ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (${now.toLocaleString("uk-UA")})`);
    return;
  }

  console.log(`‚è∞ Check started at ${now.toLocaleString("uk-UA")}`);

  try {
    const coins = await getNewCoins();
    const newCoins = [];

    for (const coin of coins) {
      if (!knownCoins[coin.link]) {
        newCoins.push(coin);
        knownCoins[coin.link] = true;
      }
    }

    if (newCoins.length === 0) {
      console.log("üîπ –ù–æ–≤–∏—Ö –º–æ–Ω–µ—Ç –Ω–µ–º–∞—î");
      return;
    }

    saveKnownCoins();

    for (const coin of newCoins) {
      const message = `<b>üÜï –ù–æ–≤–∞ –º–æ–Ω–µ—Ç–∞!</b>\n<a href="${coin.link}">${coin.title}</a>`;
      await sendTelegramMessage(message);
    }

  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –º–æ–Ω–µ—Ç:", err);
  }
}

// ===== –†–æ–∑–∫–ª–∞–¥ =====
async function scheduledScrape() {
  console.log("üïì –ó–∞–ø—É—Å–∫–∞—é –ø–ª–∞–Ω–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –º–æ–Ω–µ—Ç...");
  await checkNewCoins();
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
setInterval(scheduledScrape, 30 * 60 * 1000);
scheduledScrape();

// ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
bot.launch({ dropPendingUpdates: true });
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!");

// ===== –ì–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫ =====
process.on("unhandledRejection", (err) => {
  console.error("‚ö†Ô∏è Unhandled promise rejection:", err);
});
process.on("uncaughtException", (err) => {
  console.error("üí• Uncaught exception:", err);
});
