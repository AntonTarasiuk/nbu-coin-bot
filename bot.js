import { Telegraf } from 'telegraf';
import { config } from 'dotenv';
import { getNewCoins, getCoinDetails } from './scraper.js';
import fs from 'fs';
import express from 'express'; // ‚úÖ –¥–æ–¥–∞–π —Ü–µ–π —ñ–º–ø–æ—Ä—Ç

config();

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const CHAT_ID = process.env.CHAT_ID;

// ==== Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render / UptimeRobot ====
const app = express();

app.get('/', (req, res) => {
  res.send('‚úÖ Bot is running!');
});

// Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∑–º—ñ–Ω–Ω—É PORT
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üåê Server is running on port ${PORT}`);
});

// ==== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–æ–º–∏—Ö –º–æ–Ω–µ—Ç —É —Ñ–∞–π–ª ====
const KNOWN_COINS_FILE = './knownCoins.json';
let knownCoins = new Set();

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–æ–º–∏—Ö –º–æ–Ω–µ—Ç –∑ —Ñ–∞–π–ª—É
if (fs.existsSync(KNOWN_COINS_FILE)) {
    const saved = JSON.parse(fs.readFileSync(KNOWN_COINS_FILE, 'utf-8'));
    knownCoins = new Set(saved);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É
function saveKnownCoins() {
    fs.writeFileSync(KNOWN_COINS_FILE, JSON.stringify([...knownCoins], null, 2));
}

// ===== –¢–µ—Å—Ç–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ =====
bot.start((ctx) => ctx.reply('‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!'));

// ===== –ö–æ–º–∞–Ω–¥–∞ /all_coins =====
bot.command('all_coins', async (ctx) => {
    try {
        await ctx.reply('‚è≥ –û—Ç—Ä–∏–º—É—é –≤—Å—ñ –º–æ–Ω–µ—Ç–∏ –∑ —Å–∞–π—Ç—É...');

        const coins = await getNewCoins();
        if (coins.length === 0) {
            ctx.reply('–ù–∞ —Å–∞–π—Ç—ñ –º–æ–Ω–µ—Ç –ø–æ–∫–∏ –Ω–µ–º–∞—î üòï');
            return;
        }

        const batchSize = 5;
        let coinsWithDetails = [];

        for (let i = 0; i < coins.length; i += batchSize) {
            const batch = coins.slice(i, i + batchSize);
            const batchDetails = await Promise.all(
                batch.map(async coin => ({
                    ...coin,
                    details: await getCoinDetails(coin.link)
                }))
            );
            coinsWithDetails = coinsWithDetails.concat(batchDetails);
        }

        let message = '';
        coinsWithDetails.forEach((coin) => {
            message += `<b>${coin.name}</b>\n–¶—ñ–Ω–∞: ${coin.price}`;
            if (coin.details["–ù–æ–º—ñ–Ω–∞–ª"]) message += `\n–ù–æ–º—ñ–Ω–∞–ª: ${coin.details["–ù–æ–º—ñ–Ω–∞–ª"]}`;
            if (coin.details["–ú–∞—Ç–µ—Ä—ñ–∞–ª"]) message += `\n–ú–∞—Ç–µ—Ä—ñ–∞–ª: ${coin.details["–ú–∞—Ç–µ—Ä—ñ–∞–ª"]}`;
            if (coin.details["–¢–∏—Ä–∞–∂"]) message += `\n–¢–∏—Ä–∞–∂: ${coin.details["–¢–∏—Ä–∞–∂"]}`;
            message += `\nüîó <a href="https://coins.bank.gov.ua${coin.link}">–î–µ—Ç–∞–ª—ñ</a>\n\n`;
        });

        const chunks = [];
        while (message.length > 0) {
            chunks.push(message.slice(0, 4000));
            message = message.slice(4000);
        }

        for (const chunk of chunks) {
            await ctx.reply(chunk, { parse_mode: 'HTML', disable_web_page_preview: true });
        }

    } catch (err) {
        console.error(err);
        ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –º–æ–Ω–µ—Ç');
    }
});

// ===== –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –º–æ–Ω–µ—Ç =====
async function checkNewCoins() {
    try {
        const coins = await getNewCoins();
        const newCoins = coins.filter(c => !knownCoins.has(c.link));
        if (!newCoins.length) return;

        console.log(`${newCoins.length} –Ω–æ–≤–∏—Ö –º–æ–Ω–µ—Ç –∑–Ω–∞–π–¥–µ–Ω–æ`);

        const batchSize = 5;
        let coinsWithDetails = [];

        for (let i = 0; i < newCoins.length; i += batchSize) {
            const batch = newCoins.slice(i, i + batchSize);
            const batchDetails = await Promise.all(
                batch.map(async coin => ({
                    ...coin,
                    details: await getCoinDetails(coin.link)
                }))
            );
            coinsWithDetails = coinsWithDetails.concat(batchDetails);
        }

        for (const coin of coinsWithDetails) {
            knownCoins.add(coin.link);
            saveKnownCoins();

            let message = `<b>${coin.name}</b>\n–¶—ñ–Ω–∞: ${coin.price}`;
            if (coin.details["–ù–æ–º—ñ–Ω–∞–ª"]) message += `\n–ù–æ–º—ñ–Ω–∞–ª: ${coin.details["–ù–æ–º—ñ–Ω–∞–ª"]}`;
            if (coin.details["–ú–∞—Ç–µ—Ä—ñ–∞–ª"]) message += `\n–ú–∞—Ç–µ—Ä—ñ–∞–ª: ${coin.details["–ú–∞—Ç–µ—Ä—ñ–∞–ª"]}`;
            if (coin.details["–¢–∏—Ä–∞–∂"]) message += `\n–¢–∏—Ä–∞–∂: ${coin.details["–¢–∏—Ä–∞–∂"]}`;
            message += `\nüîó <a href="https://coins.bank.gov.ua${coin.link}">–î–µ—Ç–∞–ª—ñ</a>`;

            await bot.telegram.sendMessage(CHAT_ID, message, { parse_mode: 'HTML', disable_web_page_preview: true });
        }

    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –º–æ–Ω–µ—Ç:", err);
    }
}

// ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
bot.launch();
setInterval(checkNewCoins, 10 * 60 * 1000);
checkNewCoins();

bot.on('text', (ctx) => ctx.reply('–ë–æ—Ç –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'));
