import { Telegraf, Markup } from 'telegraf';
import { config } from 'dotenv';
import { getNewCoins, getCoinDetails } from './scraper.js';
import fs from 'fs';
import express from 'express';

config();
console.log('DOTENV loaded, SCRAPER_API_KEY:', process.env.SCRAPER_API_KEY);

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const CHAT_ID = process.env.CHAT_ID;

// ===== Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render / UptimeRobot =====
const app = express();
app.get('/', (req, res) => res.send('‚úÖ Bot is running!'));
app.get('/ping', (req, res) => res.status(200).send('OK'));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üåê Server running on port ${PORT}`));

// ===== –§–∞–π–ª –≤—ñ–¥–æ–º–∏—Ö –º–æ–Ω–µ—Ç =====
const KNOWN_COINS_FILE = './knownCoins.json';
let knownCoins = new Set();
if (fs.existsSync(KNOWN_COINS_FILE)) {
    knownCoins = new Set(JSON.parse(fs.readFileSync(KNOWN_COINS_FILE, 'utf-8')));
} else {
    fs.writeFileSync(KNOWN_COINS_FILE, JSON.stringify([], null, 2));
}
function saveKnownCoins() {
    fs.writeFileSync(KNOWN_COINS_FILE, JSON.stringify([...knownCoins], null, 2));
}

// ===== –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ retry =====
async function sendTelegramMessage(message) {
    try {
        await bot.telegram.sendMessage(CHAT_ID, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
    } catch (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram, –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫', err);
        setTimeout(() => sendTelegramMessage(message), 5000);
    }
}

// ===== Inline-–∫–∞—Ä—É—Å–µ–ª—å =====
async function sendCoinsCarousel(ctx, coins) {
    for (let i = 0; i < coins.length; i += 5) {
        const batch = coins.slice(i, i + 5);
        let message = '';
        const buttons = [];

        for (const coin of batch) {
            message += `<b>${coin.name}</b>\n–¶—ñ–Ω–∞: ${coin.price}\n–°—Ç–∞—Ç—É—Å: ${coin.status}`;
            if (coin.details["–ù–æ–º—ñ–Ω–∞–ª"]) message += `\n–ù–æ–º—ñ–Ω–∞–ª: ${coin.details["–ù–æ–º—ñ–Ω–∞–ª"]}`;
            if (coin.details["–ú–∞—Ç–µ—Ä—ñ–∞–ª"]) message += `\n–ú–∞—Ç–µ—Ä—ñ–∞–ª: ${coin.details["–ú–∞—Ç–µ—Ä—ñ–∞–ª"]}`;
            if (coin.details["–¢–∏—Ä–∞–∂"]) message += `\n–¢–∏—Ä–∞–∂: ${coin.details["–¢–∏—Ä–∞–∂"]}`;
            message += '\n\n';

            // –ö–æ–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É
            buttons.push([Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏', `https://coins.bank.gov.ua${coin.link}`)]);
        }

        await ctx.reply(message.slice(0, 4000), {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: Markup.inlineKeyboard(buttons)
        });
    }
}

// ===== –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é =====
function mainMenu() {
    return Markup.inlineKeyboard([
        [Markup.button.callback('üí∞ –£—Å—ñ –º–æ–Ω–µ—Ç–∏', 'all_coins')],
        [Markup.button.callback('üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ', 'check_new')],
        [Markup.button.url('üåê –°–∞–π—Ç –ù–ë–£', 'https://coins.bank.gov.ua')]
    ]);
}

// ===== –°—Ç–∞—Ä—Ç =====
bot.start((ctx) => ctx.reply('‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', mainMenu()));

// ===== Callback-–∫–Ω–æ–ø–∫–∏ =====
bot.action('all_coins', async (ctx) => {
    await ctx.answerCbQuery();
    try {
        const coins = await getNewCoins();
        if (coins.length === 0) return ctx.reply('–ù–∞ —Å–∞–π—Ç—ñ –º–æ–Ω–µ—Ç –ø–æ–∫–∏ –Ω–µ–º–∞—î üòï');

        let coinsWithDetails = [];
        for (let i = 0; i < coins.length; i += 5) {
            const batch = coins.slice(i, i + 5);
            const batchDetails = await Promise.all(
                batch.map(async coin => ({ ...coin, details: await getCoinDetails(coin.link) }))
            );
            coinsWithDetails = coinsWithDetails.concat(batchDetails);
        }

        await sendCoinsCarousel(ctx, coinsWithDetails);

    } catch (err) {
        console.error(err);
        ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –º–æ–Ω–µ—Ç');
    }
});

bot.action('check_new', async (ctx) => {
    await ctx.answerCbQuery();
    try {
        const coins = await getNewCoins();
        const newCoins = coins.filter(c => !knownCoins.has(c.link));
        if (!newCoins.length) return ctx.reply('–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –º–æ–Ω–µ—Ç üòï');

        let coinsWithDetails = [];
        for (let i = 0; i < newCoins.length; i += 5) {
            const batch = newCoins.slice(i, i + 5);
            const batchDetails = await Promise.all(
                batch.map(async coin => ({ ...coin, details: await getCoinDetails(coin.link) }))
            );
            coinsWithDetails = coinsWithDetails.concat(batchDetails);
        }

        for (const coin of coinsWithDetails) {
            knownCoins.add(coin.link);
            saveKnownCoins();
        }

        await sendCoinsCarousel(ctx, coinsWithDetails);

    } catch (err) {
        console.error(err);
        ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–æ–≤–∏—Ö –º–æ–Ω–µ—Ç');
    }
});

// ===== –ê–≤—Ç–æ–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ =====
async function checkNewCoins() {
    try {
        const coins = await getNewCoins();
        const newCoins = coins.filter(c => !knownCoins.has(c.link));
        if (!newCoins.length) return;

        let coinsWithDetails = [];
        for (let i = 0; i < newCoins.length; i += 5) {
            const batch = newCoins.slice(i, i + 5);
            const batchDetails = await Promise.all(
                batch.map(async coin => ({ ...coin, details: await getCoinDetails(coin.link) }))
            );
            coinsWithDetails = coinsWithDetails.concat(batchDetails);
        }

        for (const coin of coinsWithDetails) {
            knownCoins.add(coin.link);
            saveKnownCoins();

            let message = `<b>${coin.name}</b>\n–¶—ñ–Ω–∞: ${coin.price}\n–°—Ç–∞—Ç—É—Å: ${coin.status}`;
            if (coin.details["–ù–æ–º—ñ–Ω–∞–ª"]) message += `\n–ù–æ–º—ñ–Ω–∞–ª: ${coin.details["–ù–æ–º—ñ–Ω–∞–ª"]}`;
            if (coin.details["–ú–∞—Ç–µ—Ä—ñ–∞–ª"]) message += `\n–ú–∞—Ç–µ—Ä—ñ–∞–ª: ${coin.details["–ú–∞—Ç–µ—Ä—ñ–∞–ª"]}`;
            if (coin.details["–¢–∏—Ä–∞–∂"]) message += `\n–¢–∏—Ä–∞–∂: ${coin.details["–¢–∏—Ä–∞–∂"]}`;
            message += `\nüîó <a href="https://coins.bank.gov.ua${coin.link}">–î–µ—Ç–∞–ª—ñ</a>`;

            await sendTelegramMessage(message);
        }

    } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –º–æ–Ω–µ—Ç:", err);
    }
}

// ===== –¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ =====
bot.command('test_check', async (ctx) => {
    await checkNewCoins();
    ctx.reply('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –º–æ–Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
});

// ===== –ó–∞–ø—É—Å–∫ =====
bot.launch({ dropPendingUpdates: true });
setInterval(checkNewCoins, 10 * 60 * 1000);
checkNewCoins();

bot.on('text', (ctx) => ctx.reply('–ë–æ—Ç –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', mainMenu()));
